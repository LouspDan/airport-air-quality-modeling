#!/usr/bin/env python3
"""
Script de diagnostic pour identifier la structure r√©elle de la base de donn√©es
Version corrig√©e sans d√©pendances Streamlit
"""

import psycopg2
import pandas as pd
from sqlalchemy import create_engine, text

# Configuration base de donn√©es
DB_CONFIG = {
    'host': 'localhost',
    'port': 5433,
    'database': 'airport_air_quality',
    'user': 'airport_user',
    'password': 'airport_password'
}

DATABASE_URL = f"postgresql://{DB_CONFIG['user']}:{DB_CONFIG['password']}@{DB_CONFIG['host']}:{DB_CONFIG['port']}/{DB_CONFIG['database']}"

def diagnose_database():
    """Diagnostiquer la structure de la base de donn√©es"""
    
    print("üîç DIAGNOSTIC DE LA BASE DE DONN√âES")
    print("=" * 50)
    
    try:
        engine = create_engine(DATABASE_URL)
        
        # 1. Lister tous les sch√©mas
        print("\n1Ô∏è‚É£ SCH√âMAS DISPONIBLES:")
        query_schemas = """
        SELECT schema_name 
        FROM information_schema.schemata 
        WHERE schema_name NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
        ORDER BY schema_name;
        """
        schemas = pd.read_sql_query(query_schemas, engine)
        for schema in schemas['schema_name']:
            print(f"   üìÅ {schema}")
        
        # 2. Lister toutes les tables par sch√©ma
        print("\n2Ô∏è‚É£ TABLES PAR SCH√âMA:")
        query_tables = """
        SELECT 
            table_schema,
            table_name,
            table_type
        FROM information_schema.tables 
        WHERE table_schema NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
        ORDER BY table_schema, table_name;
        """
        tables = pd.read_sql_query(query_tables, engine)
        
        for schema in schemas['schema_name']:
            schema_tables = tables[tables['table_schema'] == schema]
            if not schema_tables.empty:
                print(f"\n   üìÅ Sch√©ma: {schema}")
                for _, table in schema_tables.iterrows():
                    print(f"      üìã {table['table_name']} ({table['table_type']})")
        
        # 3. Analyser les tables de donn√©es principales
        print("\n3Ô∏è‚É£ ANALYSE DES TABLES PRINCIPALES:")
        
        # Chercher les tables de vols
        flight_tables = tables[tables['table_name'].str.contains('flight|vol', case=False)]
        if not flight_tables.empty:
            print("\n   ‚úàÔ∏è TABLES DE VOLS:")
            for _, table in flight_tables.iterrows():
                table_full_name = f"{table['table_schema']}.{table['table_name']}"
                print(f"      üìã {table_full_name}")
                
                # Analyser la structure de la table
                try:
                    query_columns = f"""
                    SELECT 
                        column_name, 
                        data_type, 
                        is_nullable,
                        column_default
                    FROM information_schema.columns 
                    WHERE table_schema = '{table['table_schema']}' 
                    AND table_name = '{table['table_name']}'
                    ORDER BY ordinal_position;
                    """
                    columns = pd.read_sql_query(query_columns, engine)
                    print(f"         Colonnes: {', '.join(columns['column_name'].tolist()[:10])}...")
                    
                    # Compter les enregistrements
                    count_query = f"SELECT COUNT(*) as count FROM {table_full_name};"
                    count_result = pd.read_sql_query(count_query, engine)
                    print(f"         Enregistrements: {count_result['count'].iloc[0]}")
                    
                    # √âchantillon de donn√©es si la table contient des donn√©es
                    if count_result['count'].iloc[0] > 0:
                        sample_query = f"SELECT * FROM {table_full_name} LIMIT 3;"
                        sample_data = pd.read_sql_query(sample_query, engine)
                        print(f"         √âchantillon disponible: {len(sample_data)} lignes")
                    
                except Exception as e:
                    print(f"         ‚ùå Erreur d'acc√®s: {e}")
        
        # Chercher les tables d'√©missions
        emission_tables = tables[tables['table_name'].str.contains('emission|√©mission', case=False)]
        if not emission_tables.empty:
            print("\n   üå´Ô∏è TABLES D'√âMISSIONS:")
            for _, table in emission_tables.iterrows():
                table_full_name = f"{table['table_schema']}.{table['table_name']}"
                print(f"      üìã {table_full_name}")
                
                try:
                    # Analyser la structure
                    query_columns = f"""
                    SELECT column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_schema = '{table['table_schema']}' 
                    AND table_name = '{table['table_name']}'
                    ORDER BY ordinal_position;
                    """
                    columns = pd.read_sql_query(query_columns, engine)
                    print(f"         Colonnes: {', '.join(columns['column_name'].tolist()[:8])}...")
                    
                    # Compter les enregistrements
                    count_query = f"SELECT COUNT(*) as count FROM {table_full_name};"
                    count_result = pd.read_sql_query(count_query, engine)
                    print(f"         Enregistrements: {count_result['count'].iloc[0]}")
                    
                except Exception as e:
                    print(f"         ‚ùå Erreur d'acc√®s: {e}")
        
        # Chercher les tables m√©t√©o
        weather_tables = tables[tables['table_name'].str.contains('weather|meteo|m√©t√©o', case=False)]
        if not weather_tables.empty:
            print("\n   üå§Ô∏è TABLES M√âT√âO:")
            for _, table in weather_tables.iterrows():
                table_full_name = f"{table['table_schema']}.{table['table_name']}"
                print(f"      üìã {table_full_name}")
                
                try:
                    count_query = f"SELECT COUNT(*) as count FROM {table_full_name};"
                    count_result = pd.read_sql_query(count_query, engine)
                    print(f"         Enregistrements: {count_result['count'].iloc[0]}")
                except Exception as e:
                    print(f"         ‚ùå Erreur d'acc√®s: {e}")
        
        # Chercher les tables de mesures
        measurement_tables = tables[tables['table_name'].str.contains('mesure|measurement|station', case=False)]
        if not measurement_tables.empty:
            print("\n   üì° TABLES DE MESURES:")
            for _, table in measurement_tables.iterrows():
                table_full_name = f"{table['table_schema']}.{table['table_name']}"
                print(f"      üìã {table_full_name}")
                
                try:
                    count_query = f"SELECT COUNT(*) as count FROM {table_full_name};"
                    count_result = pd.read_sql_query(count_query, engine)
                    print(f"         Enregistrements: {count_result['count'].iloc[0]}")
                except Exception as e:
                    print(f"         ‚ùå Erreur d'acc√®s: {e}")
        
        # 4. V√©rifier les extensions PostGIS
        print("\n4Ô∏è‚É£ EXTENSIONS POSTGIS:")
        try:
            query_extensions = """
            SELECT 
                extname as extension_name,
                extversion as version
            FROM pg_extension 
            WHERE extname LIKE '%gis%' OR extname LIKE '%spatial%';
            """
            extensions = pd.read_sql_query(query_extensions, engine)
            if not extensions.empty:
                for _, ext in extensions.iterrows():
                    print(f"   ‚úÖ {ext['extension_name']} v{ext['version']}")
            else:
                print("   ‚ùå Aucune extension PostGIS trouv√©e")
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la v√©rification des extensions: {e}")
        
        # 5. Suggestions pour le dashboard
        print("\n5Ô∏è‚É£ RECOMMANDATIONS POUR LE DASHBOARD:")
        
        # V√©rifier si nous avons des donn√©es pour le dashboard
        has_flight_data = not flight_tables.empty
        has_emission_data = not emission_tables.empty
        has_weather_data = not weather_tables.empty
        has_measurement_data = not measurement_tables.empty
        
        if has_flight_data:
            print("   ‚úÖ Donn√©es de vols disponibles")
            # Proposer une requ√™te adapt√©e
            first_flight_table = flight_tables.iloc[0]
            flight_table_name = f"{first_flight_table['table_schema']}.{first_flight_table['table_name']}"
            print(f"   üí° Utiliser: {flight_table_name}")
        else:
            print("   ‚ö†Ô∏è Aucune donn√©e de vol trouv√©e - cr√©er des donn√©es de test")
            
        if has_emission_data:
            print("   ‚úÖ Donn√©es d'√©missions disponibles")
        else:
            print("   ‚ö†Ô∏è Aucune donn√©e d'√©mission trouv√©e - calculer depuis les vols")
            
        if has_weather_data:
            print("   ‚úÖ Donn√©es m√©t√©o disponibles")
        else:
            print("   ‚ö†Ô∏è Aucune donn√©e m√©t√©o trouv√©e - g√©n√©rer des donn√©es simul√©es")
            
        if has_measurement_data:
            print("   ‚úÖ Donn√©es de mesures disponibles")
        else:
            print("   ‚ö†Ô∏è Aucune station de mesure trouv√©e - cr√©er des stations fictives")
        
        return {
            'schemas': schemas,
            'tables': tables,
            'flight_tables': flight_tables,
            'emission_tables': emission_tables,
            'weather_tables': weather_tables,
            'measurement_tables': measurement_tables,
            'has_data': {
                'flights': has_flight_data,
                'emissions': has_emission_data,
                'weather': has_weather_data,
                'measurements': has_measurement_data
            }
        }
        
    except Exception as e:
        print(f"‚ùå ERREUR DE CONNEXION: {e}")
        print("üí° V√©rifiez que PostgreSQL est d√©marr√© avec docker-compose up -d postgres")
        return None

def generate_sample_queries(diagnostic_result):
    """G√©n√©rer des requ√™tes d'exemple bas√©es sur les tables trouv√©es"""
    
    if not diagnostic_result:
        return
    
    print("\n6Ô∏è‚É£ REQU√äTES D'EXEMPLE G√âN√âR√âES:")
    
    # Requ√™tes pour les vols
    if not diagnostic_result['flight_tables'].empty:
        flight_table = diagnostic_result['flight_tables'].iloc[0]
        table_name = f"{flight_table['table_schema']}.{flight_table['table_name']}"
        
        print(f"\n   ‚úàÔ∏è Requ√™te vols depuis {table_name}:")
        print(f"""
        -- Compter les vols par type d'a√©ronef
        SELECT 
            aircraft_type,
            COUNT(*) as flight_count
        FROM {table_name}
        GROUP BY aircraft_type
        ORDER BY flight_count DESC
        LIMIT 10;
        """)
        
        print(f"""
        -- Vols r√©cents (adaptation automatique de colonne date)
        SELECT 
            flight_id, aircraft_type, 
            COALESCE(flight_date, scheduled_departure::date) as date_vol
        FROM {table_name}
        ORDER BY COALESCE(flight_date, scheduled_departure::date) DESC
        LIMIT 5;
        """)
    
    # Requ√™tes pour les √©missions
    if not diagnostic_result['emission_tables'].empty:
        emission_table = diagnostic_result['emission_tables'].iloc[0]
        table_name = f"{emission_table['table_schema']}.{emission_table['table_name']}"
        
        print(f"\n   üå´Ô∏è Requ√™te √©missions depuis {table_name}:")
        print(f"""
        -- √âmissions par type de polluant
        SELECT 
            type_polluant,
            SUM(quantite_emise_kg) as total_kg
        FROM {table_name}
        GROUP BY type_polluant
        ORDER BY total_kg DESC;
        """)

def test_connection():
    """Tester la connexion √† la base de donn√©es"""
    print("üîó TEST DE CONNEXION:")
    try:
        engine = create_engine(DATABASE_URL)
        with engine.connect() as connection:
            result = connection.execute(text("SELECT version();"))
            version = result.fetchone()[0]
            print(f"   ‚úÖ Connexion r√©ussie")
            print(f"   üìä Version PostgreSQL: {version}")
            return True
    except Exception as e:
        print(f"   ‚ùå √âchec de connexion: {e}")
        print(f"   üí° V√©rifiez que PostgreSQL est d√©marr√©:")
        print(f"      docker-compose up -d postgres")
        print(f"      docker-compose logs postgres")
        return False

if __name__ == "__main__":
    print("üöÄ D√âMARRAGE DU DIAGNOSTIC")
    
    # Test de connexion d'abord
    if test_connection():
        # Ex√©cuter le diagnostic complet
        result = diagnose_database()
        
        if result:
            # G√©n√©rer des requ√™tes d'exemple
            generate_sample_queries(result)
            
            print("\n" + "=" * 50)
            print("‚úÖ DIAGNOSTIC TERMIN√â")
            print("üí° Utilisez ces informations pour adapter le dashboard")
            
            # R√©sum√© pour le dashboard
            print(f"\nüìã R√âSUM√â POUR LE DASHBOARD:")
            if result['has_data']['flights']:
                print(f"   ‚úÖ Mode donn√©es r√©elles possible")
            else:
                print(f"   üé≠ Mode donn√©es simul√©es recommand√©")
        else:
            print("‚ùå √âchec du diagnostic")
    else:
        print("‚ùå Impossible de se connecter √† la base de donn√©es")
        print("üé≠ Le dashboard utilisera des donn√©es simul√©es")